web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
abi = JSON.parse('[ { "constant": true, "inputs": [ { "name": "index", "type": "uint256" } ], "name": "getCustomerData", "outputs": [ { "name": "", "type": "string" }, { "name": "", "type": "string" }, { "name": "", "type": "address" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "getCustomersCount", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [ { "name": "Uname", "type": "string" }, { "name": "orgAddress", "type": "address" } ], "name": "ifAllowed", "outputs": [ { "name": "", "type": "bool" } ], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [ { "name": "Uname", "type": "string" }, { "name": "DataHash", "type": "string" }, { "name": "oAddress", "type": "address" } ], "name": "addCustomer", "outputs": [ { "name": "", "type": "uint256" } ], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [ { "name": "Uname", "type": "string" }, { "name": "orgAddress", "type": "address" }, { "name": "isAllowed", "type": "bool" } ], "name": "allowBank", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": true, "inputs": [], "name": "getOrganizationCount", "outputs": [ { "name": "", "type": "uint256" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "index", "type": "uint256" } ], "name": "getOrganizationName", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [], "name": "checkDeployed", "outputs": [ { "name": "", "type": "bool" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": true, "inputs": [ { "name": "index", "type": "uint256" } ], "name": "getOrganizationData", "outputs": [ { "name": "", "type": "string" }, { "name": "", "type": "address" } ], "payable": false, "stateMutability": "view", "type": "function" }, { "constant": false, "inputs": [ { "name": "Uname", "type": "string" }, { "name": "orgAddress", "type": "address" } ], "name": "addRequest", "outputs": [], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [ { "name": "x", "type": "bytes32" } ], "name": "bytes32ToString", "outputs": [ { "name": "", "type": "string" } ], "payable": false, "stateMutability": "nonpayable", "type": "function" }, { "constant": false, "inputs": [ { "name": "uname", "type": "string" }, { "name": "eth", "type": "address" } ], "name": "addOrganization", "outputs": [ { "name": "", "type": "uint256" } ], "payable": true, "stateMutability": "payable", "type": "function" }, { "constant": false, "inputs": [ { "name": "Uname", "type": "string" }, { "name": "ind", "type": "uint256" } ], "name": "getOrgRequestAddress", "outputs": [ { "name": "", "type": "address" } ], "payable": true, "stateMutability": "payable", "type": "function" }, { "inputs": [ { "name": "oNames", "type": "bytes32[]" } ], "payable": false, "stateMutability": "nonpayable", "type": "constructor" } ]');
KycContract = web3.eth.contract(abi);
// In your nodejs console, execute contractInstance.address to get the address at which the contract is deployed and change the line below to use your deployed address
contractInstance = KycContract.at('0xf0e7420580d04ff3d29df47d3c07c3aa78f01168');
window.localStorage.setItem('orgname', 'airtel';
$(document).ready(function() {
	var orgname = window.localStorage.getItem('orgname');
  	var cCount = contractInstance.getCustomersCount();		  
  	for(int i=0;i<cCount;i++) {
  		var customer = contractInstance.getCustomerData(orgname,i);
  		console.log(customer);
  	}
});
